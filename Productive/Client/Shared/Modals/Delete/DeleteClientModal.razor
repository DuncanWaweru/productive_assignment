@using Productive.Shared.ViewModels;

@inject HttpClient Http
@inject IJSRuntime JsRuntime
<!-- Modal -->
<div class="modal fade" id="@ModalId" tabindex="-1" role="dialog" aria-labelledby="media-modal-label">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" >Delete Client</h5>
                @if (!_isLoading)
                {
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                }
            </div>


            <div class="modal-body">
                <div class="alert alert-danger" role="alert">
                    Are you sure you want to delete this client by the name <strong> @_client.Name </strong>  ?
                </div>
                <div class="text-center">
                 <span @onclick="deleteClient" class="btn btn-danger">Delete</span>
                </div>
            </div>
            <div class="modal-footer">
                @if (_isLoading)
                {
                    <div class="spinner-border" role="status">
                        <span class="sr-only">...</span>
                    </div>
                }
                else
                {
                   
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

                }
            </div>
        </div>
    </div>
</div>

@code {
    ClientViewModel _client = new ClientViewModel();
    public bool _isLoading { get; set; } = false;
    public string ModalId { get; set; } = "deleteClientModal";
    [Parameter]
    public EventCallback<bool> OnClientDeleted { get; set; }


    public async Task ShowClientDeleteModalAsync(ClientViewModel client)
    {
        _client = client;
        _isLoading = false;
        StateHasChanged();

        await JsRuntime.InvokeVoidAsync("app.showModal", ModalId);
    }
    private async Task deleteClient()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {

            var response = await Http.DeleteAsync($"api/Clients/{_client.Id}");
            var responseText = await response.Content.ReadAsStringAsync();
            dynamic jsonObject = JsonConvert.DeserializeObject<dynamic>(responseText);
            if (response.IsSuccessStatusCode)
            {
                await JsRuntime.InvokeVoidAsync("app.toastSuccess", $"Client deleted Successfully!");
                await OnClientDeleted.InvokeAsync(true);
                _isLoading = false;
                StateHasChanged();
                await JsRuntime.InvokeVoidAsync("app.hideModal", ModalId);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("app.toastFailure", $"{jsonObject["error"]}");
                _isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception exception)
        {
            await JsRuntime.InvokeVoidAsync("app.toastFailure", $"An error occured try again!");
            _isLoading = false;
            StateHasChanged();

            // exception.Redirect();
        }
    }
}

