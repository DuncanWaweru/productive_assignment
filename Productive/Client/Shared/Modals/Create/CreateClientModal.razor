@using Productive.Shared.ViewModels;

@inject HttpClient Http
@inject IJSRuntime JsRuntime
<!-- Modal -->
<div class="modal fade" id="@ModalId" tabindex="-1" role="dialog" aria-labelledby="media-modal-label">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Add Client</h5>
                @if (!_isLoading)
                {
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                }
            </div>

           
                            <div class="modal-body">
                                <EditForm class="row g-3" Model="@_client" OnValidSubmit="@HandleAddClientSubmit">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="col-12">
                                        <label for="Name" class="form-label"> Name</label>
                                        <InputText class="form-control" placeholder="Client's Name" @bind-Value="_client.Name" />
                                    </div>

                                    <div class="col-md-6">
                                        <label for="Name" class="form-label"> Email</label>
                                        <InputText class="form-control" placeholder="Client's Email" @bind-Value="_client.Email" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="Name" class="form-label"> CellPhone</label>
                                        <InputText class="form-control" placeholder="Client's CellPhone" @bind-Value="_client.CellPhone" />
                                    </div>

                                    <div class="col-12">
                                        <button type="submit" class="btn btn-primary">Save</button>
                                    </div>
                                </EditForm>
                            </div>
                            <div class="modal-footer">
                                @if (_isLoading)
                                {
                                   <div class="spinner-border" role="status">
                                       <span class="sr-only">...</span>
                                   </div>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

                                }
                            </div>
                        </div>
                    </div>
                </div>

                @code {
                    ClientCreateViewModel _client = new ClientCreateViewModel();
                    public bool _isLoading { get; set; } = false;
                    public string ModalId { get; set; } = "createClientModal";
                    [Parameter]
                    public EventCallback<bool> OnClientAdded { get; set; }


                    public async Task ShowClientRegisterModalAsync()
                    {
                        _client = new ClientCreateViewModel();
                        _isLoading = false;
                        StateHasChanged();

                        await JsRuntime.InvokeVoidAsync("app.showModal", ModalId);
                    }
                    private async Task HandleAddClientSubmit()
                    {
                        _isLoading = true;
                        StateHasChanged();

                        try
                        {

                            var response = await Http.PostAsJsonAsync("api/Clients", _client);
                            var responseText = await response.Content.ReadAsStringAsync();
                            dynamic jsonObject = JsonConvert.DeserializeObject<dynamic>(responseText);
                            if (response.IsSuccessStatusCode)
                            {
                                await JsRuntime.InvokeVoidAsync("app.toastSuccess", $"Client saved Successfully!");
                                await OnClientAdded.InvokeAsync(true);
                                _isLoading = false;
                                StateHasChanged();

                                await JsRuntime.InvokeVoidAsync("app.hideModal", ModalId);
                            }
                            else
                            {
                                await JsRuntime.InvokeVoidAsync("app.toastFailure", $"{jsonObject["error"]}");
                                _isLoading = false;
                                StateHasChanged();
                            }
                        }
                        catch (Exception exception)
                        {
                            await JsRuntime.InvokeVoidAsync("app.toastFailure", $"An error occured try again!");
                            _isLoading = false;
                            StateHasChanged();

                            // exception.Redirect();
                        }
                    }
                }

